// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instructionb pc[15]

    PARTS:
	//// Replace this comment with your code.
    // FIRST PART 1/3
    Mux16(a=instruction, b=ALUOUT, sel=instruction[0], out=muxoutFirstMux);

    ARegister(in=muxoutFirstMux, load=instruction[10], out=ARegisterOUT,out=ARegisterPC,out=AddressM); // instruction[4] because it is the first value of ddd

    // SECOND PART 2/3
    Mux16(a=ARegisterOUT, b=inM, sel=instruction[7], out=ALUInB);

    DRegister(in=DRegisterIN, load=instruction[11], out=DRegisterOUT);

    ALU(x=DRegisterOUT, y=ALUInB, zx=instruction[4], nx=instruction[5], zy=instruction[6], ny=instruction[7], f=instruction[8], no=instruction[9], out=outM,out=DRegisterIN,out=ALUOUT, zr=zr, ng=ng);

    Mux(a=true, b=false, sel=instruction[12], out=writeM);
    
    // THIRD PART 3/3
    // if reset==1 : pc = 0
    // JUMP bits last three from instruction = instruction[12..15]
    // based on numbers we perform logics like JEQ JNE JLT ect...
    // to start / restart JBits = 000 PC=0
    // if all Jbits 1 goto PC=A 
    // no jump PC++
    // if one/two of the JBits is 1 then conditional goto PC=A else PC++
    // else JUMPBits 

    // pc holds the address of next instruction
    And(a=zr , b=instruction[12], out=);
    And(a=ng, b=instruction[13], out= );
    Not(in= , out= );

    PC(in=ARegisterPC, load=reset, inc=true , reset=false,out=pc16);

    Mux16(a= pc16, b=ARegisterPC, sel=ng , out[0..14]=pc);

}